Chapter 1 Think OS

Compilation

1) Give an example of a feature common in interpreted languages that is rare in compiled languages.

Interpreted languages support dynamic types, so you don't always know the type of variable until the program is running.

2) Name two advantages of static typing over dynamic typing.

Errors can be found in parts of the program that have never run and checks don't have to happen at run time.

3) Give an example of a static semantic error.

The compiler checks whether variables and values have the right type. If they do not, then it throws a "state semantic" error. 

4) What are two reasons you might want to turn off code optimization?

Sometimes your program has a bug that you would not normally detect, because you had optimized your code, which had caused it to disappear.
Debugging is easier without code optimizaiton.


5) When you run gcc with -S, why might the results look different on different computers?

gcc is configured to generate code for the machine you are running on.

6) If you spell a variable name wrong, or if you spell a function name wrong, the error messages you get might look very different.  Why?


If you there's a syntax error, you get a message from the compiler. If you use a function that's not defined by any standard libraries, you get a message from the linker. 

7) What is a segmentation fault?

A failure to have read or write to the correct location in memory.

