Files and file systems

1) What abstractions do file systems provide?  Give an example of something that is logically true about files systems but not true of their implementations.

Abstraction for the type of drive, whether it is a hard disk or solid state. 

2) What information do you imagine is stored in an OpenFileTableEntry?

The number of bytes from the beginning of the file.

3) What are some of the ways operating systems deal with the relatively slow performance of persistent storage?

Block transfers, prefetching, buffering and caching.

4) Suppose your program writes a file and prints a message indicating that it is done writing.  Then a power cut crashes your computer.  After you restore power and reboot the computer, you find that the file you wrote is not there.  What happened?

The program had written to the cache and it had yet been on disk.

5) Can you think of one advantage of a File Allocation Table over a UNIX inode?  Or an advantage of a inode over a FAT?

6) What is overhead?  What is fragmentation?

Overhead - space used by the block allocation system
Fragmentation - When blocks are used inefficiently

7) Why is the "everything is a file" principle a good idea?  Why might it be a bad idea?

You can use it set it up as a form of inter-process communication, for example UNIX pipe. It may be a bad idea because of unintended consequences overwriting onto important files.

If you would like to learn more about file systems, a good next step is to learn about journaling file systems.  Start with the Wikipedia article, then "Anatomy of Linux Journaling File Systems".  Also consider reading this USENIX paper.
